---
name: Build the Container Image

on: # yamllint disable-line rule:truthy
  workflow_call:
    outputs:
      build-cache-key:
        description: The cache key to use when restoring an image later
        value: ${{ jobs.build-image.outputs.build-cache-key }}

permissions:
  contents: read

# `actions/cache` does not upload a new cache until completing a job successfully.
# To better cache image builds, tests are handled in a dependent job afterwards.
# This way failing tests will not prevent caching of an image. Useful when the build context
# is not changed by new commits.

jobs:
  build-image:
    name: Build
    runs-on: ubuntu-20.04
    outputs:
      build-cache-key: ${{ steps.derive-image-cache-key.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Derive Docker image cache key from content
        id: derive-image-cache-key
        shell: bash
        run: |
          CHECKSUM=${{ hashFiles('Dockerfile', 'scripts/**', 'configuration/**') }}
          echo "digest=${CHECKSUM}" >>"${GITHUB_OUTPUT}"

      # Attempts to restore the build cache from a prior build run.
      # If the exact key is not restored, then upon a successful job run
      # the new cache is uploaded for this key containing the contents at `path`.
      # Cache storage has a limit of 10GB, and uploads expire after 7 days.
      # When full, the least accessed cache upload is evicted to free up storage.
      # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows
      - name: Handle Docker build layer cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: cache-buildx-${{ steps.derive-image-cache-key.outputs.digest }}
          # If no exact cache-hit for key found, lookup caches with a `cache-buildx-` key prefix:
          # This is safe due to cache layer invalidation via the image build context.
          restore-keys: |
            cache-buildx-

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0
        with:
          platforms: arm64,arm

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.4.0

      - name: Build images
        uses: docker/build-push-action@v6.2.0
        with:
          context: .
          # Build at least the AMD64 image (which runs against the test suite).
          platforms: linux/amd64
          # Paired with steps `actions/cache` and `Replace cache` (replace src with dest):
          # NOTE: `mode=max` is only for `cache-to`, it configures exporting all image layers.
          # https://github.com/docker/buildx/blob/master/docs/reference/buildx_build.md#cache-from
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          # This job just builds the image and stores to cache, no other exporting required:
          # https://github.com/docker/build-push-action/issues/546#issuecomment-1122631106
          outputs: type=cacheonly

      # WORKAROUND: The `cache-to: type=local` input for `build-push-action` persists old-unused cache.
      # The workaround is to write the new build cache to a different location that replaces the
      # original restored cache after build, reducing frequency of eviction due to cache storage limit (10GB).
      # NOTE: This does not affect `cache-hit == 'true'` (which skips upload on direct cache key hit)
      - name: Replace cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
